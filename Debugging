const debug = require('debug')('app:startup');
const config = require('config');
const morgan = require('morgan');
const helmet = require('helmet');
const Joi = require('joi');
const logger = require('./logger');
const express = require('express');
const app = express();
console.log(app.get.env);
console.log(app.settings.env);
console.log(process.env.DEBUG);
//Configuration

console.log('Application Name: ' + config.get('name'));
console.log('Mail Server: ' + config.get('mail.host'));
console.log('Mail Password: ' + config.get('mail.password'));


if (app.get('env') === 'development') {
    app.use(morgan('tiny'));
    debug('Morgan Enabled ');
}


//Custom MiddleWare Function 
app.use(logger);

app.use(function(req,res,next) {
    console.log('Authentication...');
    next();
});


const courses = [
    {
         id: 1, 
         name: 'course1' 
    },

    {
         id: 2, 
         name: 'course2' 
    },

    {
         id: 3, 
         name: 'course3' 
    },
]

app.get('/', (req, res) => {
    res.send('Hello World');
});

app.get('/api/courses', (req, res) => {
    res.send(courses);
});


app.post('/api/courses', (req, res) => {
    const schema = { 
        name: Joi.string().min(3).required()
    }
    console.log(req.body.name);
    const result = Joi.validate(req.body, schema);
    console.log(result);
    if(!req.body.name || req.body.name.length < 3) {
        res.status(400).send('Name is required and should be minimum 3 characters');
        return ;
    }

    var course = {
        id: courses.length + 1,
        name: req.body.name  
    };
    courses.push(course);
    res.send(course);
})


app.put('/api/courses/:id', (req, res) => {
    var course = courses.find( c => c.id === parseInt(req.params.id))
    if(!course) {
        res.status(404).send('The course with the given id does not exist');
    } else {
        course = {
            id: course.id,
            name: `updated ${course.name}`
        }
    }

})

// app.get('/api/courses/:id', ==>>> Here is one parameter and that is id

app.get('/api/courses/:id', (req, res) => {
    // res.send(req.params);
    // res.send(req.query);
    var course = courses.find( c => c.id === parseInt(req.params.id))
    if(!course) {
        res.status(404).send('The course with the given id does not exist');
    } else {
        res.send(course);
    }
});

const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`Listening on port ${port}...`)) 
